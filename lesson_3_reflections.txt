When would you want to use a remote repository rather than keeping all your
work local?

A remote repository would be useful when the user wants to share their work
publicly on GitHub, or when multiple users are collaborating on one project.
Keeping all work locally would be ideal only when the user wants to keep all
their work private or when the project isn't ready to be publicly shared.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It's useful to manually pull changes in situations where a collaborative
project is still in progress and not ready to be committed yet. This way the
changes can be pulled when the project is ready instead of automatically pulled
during development, which could potentially cause issues.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is when a repository is cloned directly on GitHub and only works on the server side. This would be used when the user wants to add/modify another user's repository without having to clone the repository to their machine. Also, forking gives credit to the user that the repository originated from. Forking can be used to propose changes to someone else's project or to use their project as a starting point for your own project. Forking maintains connection to the remote repo and allows push/pull functionality, whereas a clone does not.
A clone is a direct copy of a repository. A clone can be made from a remote repo to a local repo (which will automatically create a remote called origin) or from a local repo to a local repo. This would be used when the user wants to copy a repository from one directory to another on their local computer, or when a user wants to copy a remote repo without the ability to sync to the original remote repo.
A branch is simply a label that points to a commit. A branch is only created within a single repository and is used to create commits that originate from the main project but is independent of the project.


What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit of having a copy of the last known state of the remote stored locally is that it allows the user to fetch any updates from the remote without overwriting any updates that they made locally. This allows the user to compare the remote's updates to the local updates.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaborating without Git/GitHub would be much harder and much more prone to miscommunication or errors due to lack organization. Git/GitHub allows users working together to make changes individually, compare changes made by each user, and merge changes together to the master branch. Without Git/GitHub, it would be very easy to lose track of who made which changes or what current version the main project is supposed to be on.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It's a good idea to make changes on a separate branch when working collaboratively with others. This allows a user to make their own changes on their separate branch and propose it to others for review without affecting the master branch. Once the changes have been reviewed, the separate branch can be merged with the master to form an up-to-date master. This is advantageous compared to making changes directly on the master because it allows all users to be aware of the changes being made to master and to give their input on the changes before master is actually updated. The only upside to making changes directly on the master branch is that it eliminates the complexity associated with separate branches. This is only useful if a user is working on a project alone without any collaboration from others. 
