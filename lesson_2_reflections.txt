What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, an empty repository is created (or, if a
repository already exists, the repository is reinitialized). This step is
necessary because it creates the hidden .git file that Git uses to recognize
whether a directory is a repository or not.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an intermediate area between the working directory and the
repository where files are stored before they are committed. Files that are
initially in the working directory are added to the staging area, then are
committed when the commit command is ran. This gives the user the flexibility
to add and remove files as necessary before a commit needs to be made.


How can you use the staging area to make sure you have one commit per logical
change?

The staging area can be used to add files that are only relevant to the logical
change being made. Also, using git diff and git diff --staged, the user can
compare the changes being made between the working directory and the staging
area, or between the staging area and the most recent commit, in order to verify
that the commit will only be for one logical change.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful when the user wants to implement changes or features
without affecting the main project files. Branches allow the user to deviate
from the master branch so they can freely makes changes without worrying about
affecting the original files. Branches could also be used to keep things
organized in the course of development or while working with others. The master
branch could be a production quality branch that always works. Then there could
be a development branch where active work is taking place on your project.
There could also be some experimental or unique feature branches.


How do the diagrams help you visualize the branch structure?

Diagrams help by showing where each branch stems from, the parents of each
commit in a branch, and whether any commit is unreachable.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged together, Git automatically interprets whether
code was deleted or added and keeps the added code and discards the deleted
code. The branch that was checked out at the time or the merge becomes the
label that the new merged branch label points to. The merge results in a new
commit that has the latest commits from both branches as its parents, therefore
it has access to all the commits in both branches. We represent it in the
diagram as a visual representation to keep track of where branches were created
and what commits can be accessed. 
